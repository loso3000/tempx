name: ipd-ipv6-jz

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  # schedule:
    # - cron: 0 17 * * *
  # watch:
  #   types: started

env:
  SOURCE_URL: https://github.com/immortalwrt/immortalwrt
  SOURCE_BRANCH: openwrt-18.06-k5.4
  CONFIG_FILE: configx/x86/64.config
  DIY_SH: scriptx/settings-jz.sh
  DIY2_SH: scriptx/diy.sh
  KMODS_IN_FIRMWARE: true
  UPLOAD_WETRANSFER: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-20.04
    if: github.event.repository.owner.id == github.event.sender.id
    outputs:
      OPENWRTROOT: ${{ steps.update.outputs.OPENWRTROOT }}
      PLATFORM: ${{ steps.compile.outputs.PLATFORM }}
      TARGET: ${{ steps.compile.outputs.TARGET }}
      SUBTARGET: ${{ steps.compile.outputs.SUBTARGET }}
      FIRMWARE: ${{ steps.compile.outputs.FIRMWARE }}
      GENERATE_STATUS: ${{ steps.generate.outputs.GENERATE_STATUS }}

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004) tree
        sudo apt-get -y install python3 git-core curl
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
    - name: Clone Source Code
      run: |
        df -hT $PWD
        # git config --global user.email "git@github.com"
        # git config --global user.name "GitHub"
        git clone $SOURCE_URL -b $SOURCE_BRANCH openwrt
    - name: Cache
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        prefix: ${{ github.workspace }}/openwrt
        clean: 'true'

    - name: Update Feeds
      id: update
      run: |
        cd openwrt
        echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
        echo "::set-output name=OPENWRTROOT::$(echo $PWD)"
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        chmod +x ../scriptx/*.sh
        ../$DIY_SH
    - name: Install Feeds
      run: |
        cd $OPENWRTROOT
        ../$DIY2_SH
        ./scripts/feeds install -a
    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRTROOT/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
          # cat configx/general-packages-jz.config >> $OPENWRTROOT/.config
          # cat configx/extra-drivers.config >> $OPENWRTROOT/.config
        #chmod +x scriptx/*.sh
        cd $OPENWRTROOT
        ../scriptx/clash-core.sh amd64
        make defconfig
    - name: Download Package
      id: package
      run: |
        cd $OPENWRTROOT
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            echo "CONFIG_ALL_NONSHARED=y" >> .config
        fi
        cat .config
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
  
    - name: Compile Packages
      id: compile
      run: |
        cd $OPENWRTROOT
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        echo "::set-output name=PLATFORM::$(echo $PLATFORM)"
        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        echo "::set-output name=TARGET::$(echo $TARGET)"
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "::set-output name=SUBTARGET::$(echo $SUBTARGET)"
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=FIRMWARE::$(echo $PWD)"
        echo "::set-output name=COMPILE_STATUS::success"
    - name: Generate Firmware
      if: steps.compile.outputs.COMPILE_STATUS == 'success'
      id: generate
      run: |
        cd $OPENWRTROOT
        make package/install -j$(nproc) || make package/install -j1 V=s
        make target/install -j$(nproc) || make target/install -j1 V=s
        make checksum
        echo "::set-output name=GENERATE_STATUS::success"
    - name: Upload Bin Folder
      uses: actions/upload-artifact@main
      with:
        name: bin-archive
        path: openwrt/bin
        
  Upload:
    needs: [Build]
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@main
        
      - name: Restore Variables
        run: |
          echo "OPENWRTROOT=$(echo '${{needs.Build.outputs.OPENWRTROOT}}')" >> $GITHUB_ENV
          echo "PLATFORM=$(echo '${{needs.Build.outputs.PLATFORM}}')" >> $GITHUB_ENV
          echo "TARGET=$(echo '${{needs.Build.outputs.TARGET}}')" >> $GITHUB_ENV
          echo "SUBTARGET=$(echo '${{needs.Build.outputs.SUBTARGET}}')" >> $GITHUB_ENV
          echo "FIRMWARE=$(echo '${{needs.Build.outputs.FIRMWARE}}')" >> $GITHUB_ENV
          echo "GENERATE_STATUS=$(echo '${{needs.Build.outputs.GENERATE_STATUS}}')" >> $GITHUB_ENV
        
      - name: Prepare Artifact
        run: |
          mkdir -p ./jz/firmware
          mkdir -p ./jz/package
          cp -rf $(find ./openwrt/bin/ -type f -name "*.ipk") ./jz/package
          find ./openwrt/bin/targets/ -name "*combined*img*"| xargs -i mv -f {} ./jz/firmware
          cd ./jz/firmware
          gzip *.img
          echo -e "Sirpdboy-IPV6-ZJ-${{ env.DATA}}极致通用版--【efi通用不区分引导方式】\n" > 版本日期和MD5信息.txt
          echo -e "【固件插件说明与各版本下载链接】：https://github.com/sirpdboy/openwrt/ \n" >> 版本日期和MD5信息.txt
          echo -e "MD5: \n" >> 版本日期和MD5信息.txt
          md5sum *img* >> 版本日期和MD5信息.txt
      - name: Upload Firmware
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt-ipv6-jz-Firmware
          path: ./jz/firmware
      - name: Upload  IPK
        uses: actions/upload-artifact@main
        with:
          name: OpenWrt-ipv6-jz-Ipk
          path: ./jz/package
      - name: Upload Firmware To WeTransfer
        id: wetransfer
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET/
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=Firmware-Wetransfer.com::$(cat wetransfer.log | grep https)"
          echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
      - name: Generate release tag
        id: tag
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        run: |
          echo "::set-output name=release_tag::$(date +"%Y.%m.%d")-Lean3"
          echo "::set-output name=release_date::$(date +"%Y.%m.%d")"
          touch release.txt
          [ $UPLOAD_WETRANSFER = true ] && echo "[WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
          echo "::set-output name=status::success"
      - name: Delete workflow runs
        uses: GitRML/delete-workflow-runs@main
        with:
          retain_days: 5
          keep_minimum_runs: 2

      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@v0.1.0
        if: env.UPLOAD_RELEASE == 'true' && !cancelled()
        with:
          keep_latest: 5
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: |
            bin-archive
