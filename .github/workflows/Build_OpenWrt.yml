name: Build_OpenWrt
on:
  # push:
  #   paths: [ i_openwrt ]
  # schedule: [ cron: 0 2 */7 * * ]
  # watch:
  #   types: started
  workflow_dispatch:
    inputs:
      repourl:
        description: '选择源码仓库：coolsnowwolf(Lean), ImmortalWrt(天灵), openwrt(官网)'
        default: 'coolsnowwolf'
        required: true
        type: choice
        options: [ coolsnowwolf, ImmortalWrt, openwrt ]
      target:
        description: '选择要生成firmware的机型：'
        default: 'x86_64'
        required: true
        type: choice
        options: [ x86_64, nanopi-r2s,nanopi-r4s, -phicomm_k2p, Rpi-4B,-armvirt_64_Default, -asus_rt-n16 , -newifi-d2]
      version:
        description: '选择要生成版本： super(极致), mini(精简)，plus(全家桶) ，dz(定制）'
        default: 'super'
        required: true
        type: choice
        options: [super,mini,plus,dz]
      partsize:
        description: '设置rootfs大小：（选填,只适用x86_64，r系列，armvirt）'
        required: false

env:
  UPLOAD_RELEASE: true
  UPLOAD_PACKAGES: true
  UPLOAD_SYSUPGRADE: true
  UPLOAD_BIN_DIR: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: true
  REPO_FLODER: openwrt

jobs:
  immo-openwrt:
    name: openwrt-${{ github.event.inputs.repourl }}-${{ github.event.inputs.target }}-${{ github.event.inputs.version }}

    runs-on: ubuntu-20.04
    continue-on-error: true

    env:
      REPO_URL: ${{ github.event.inputs.repourl }}
      TARGET: ${{ github.event.inputs.target }}
      VERSION: ${{ github.event.inputs.version }}
      PARTSIZE: ${{ github.event.inputs.partsize }}

    # strategy:
    #   fail-fast: false
    #   matrix:
    #     target: ["${{ github.event.inputs.target }}"]

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Load Settings
      run: |
        if [ ${{github.event.inputs.repourl}} == "coolsnowwolf" ]; then
        
            echo "REPO_URL=https://github.com/coolsnowwolf/lede" >> $GITHUB_ENV
            echo "REPO_BRANCH=master" >> $GITHUB_ENV
        elif [ ${{github.event.inputs.repourl}} == "immortalwrt" ]; then
        
            echo "REPO_URL=https://github.com/immortalwrt/immortalwrt" >> $GITHUB_ENV
            echo "REPO_BRANCH=openwrt-18.06-k5.4" >> $GITHUB_ENV
        elif [ ${{github.event.inputs.repourl}} == "openwrt" ]; then
        
            echo "REPO_URL=https://github.com/openwrt/openwrt" >> $GITHUB_ENV
            echo "REPO_BRANCH=openwrt-18.06" >> $GITHUB_ENV
        fi
            echo "VERSIONL=${{ github.event.inputs.version }}" >> $GITHUB_ENV
            echo "PARTSIZE=${{ github.event.inputs.partsize }}" >> $GITHUB_ENV
        if [ ${{ github.event.inputs.target }} == "x86_64" ]; then
            echo "ARCH=linux/amd64" >> $GITHUB_ENV
            echo "MTARGET=x86_64" >> $GITHUB_ENV
        elif [[ ${{ github.event.inputs.target }}=~ (Rpi-4B|nanopi-r2s|nanopi-r4s) ]]; then
            echo "ARCH=linux/arm64" >> $GITHUB_ENV
        fi
        if [ ${{ github.event.inputs.target }} == "Rpi-4B" ]; then
            echo "MTARGET=aarch64_cortex-a72" >> $GITHUB_ENV
        elif [ ${{ github.event.inputs.target }}== "nanopi-r2s" ]; then
            echo "MTARGET=aarch64_generic" >> $GITHUB_ENV
        fi

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        chmod +x ./init_build_environment.sh
        
        sudo ./init_build_environment.sh &
   
    - name: Clone source code
      run: |
        #git clone $REPO_URL -b v$REPO_BRANCH $REPO_FLODER
         
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH $REPO_FLODER
        if [[ "${{ contains(github.event.action, 'sdk') }}" == "true" ]]; then
        cd openwrt
        if [[ ${{matrix.target}} == "x86_64" ]]; then
            curl -fL -m 60 -o sdk.tar.xz https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/x86/64/openwrt-sdk-$REPO_BRANCH-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz || curl -fL -m 60 -o sdk.tar.xz https://openwrt.tetaneutral.net/releases/21.02-SNAPSHOT/targets/x86/64/openwrt-sdk-21.02-SNAPSHOT-x86-64_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        elif [[ ${{matrix.target}} == nanopi* ]]; then
            curl -fL -m 60 -o sdk.tar.xz https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/rockchip/armv8/openwrt-sdk-$REPO_BRANCH-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz || curl -fL -m 60 -o sdk.tar.xz https://openwrt.tetaneutral.net/releases/21.02-SNAPSHOT/targets/rockchip/armv8/openwrt-sdk-21.02-SNAPSHOT-rockchip-armv8_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        elif [[ ${{matrix.target}} =~ "Rpi-4B" ]]; then
            curl -fL -m 60 -o sdk.tar.xz https://downloads.openwrt.org/releases/$REPO_BRANCH/targets/bcm27xx/bcm2711/openwrt-sdk-$REPO_BRANCH-bcm27xx-bcm2711_gcc-8.4.0_musl.Linux-x86_64.tar.xz || curl -fL -m 60 -o sdk.tar.xz https://openwrt.tetaneutral.net/releases/21.02-SNAPSHOT/targets/bcm27xx/bcm2711/openwrt-sdk-21.02-SNAPSHOT-bcm27xx-bcm2711_gcc-8.4.0_musl.Linux-x86_64.tar.xz
        fi
        fi
        echo "REPO_BRANCH=$REPO_BRANCH" >> $GITHUB_ENV
    - name: Free up disk space
      if: env.FREE_UP_DISK == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/staging_dir /mnt/openwrt/build_dir/hostpkg openwrt/build_dir
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
        ln -sf /mnt/openwrt/build_dir/hostpkg openwrt/build_dir/hostpkg
    - name: Cache
      uses: klever1988/cachewrtbuild@main
      with:
          ccache: 'true'
          prefix: ${{ github.workspace }}/$REPO_FLODER
          clean: 'true'
    - name: Update feeds
      run: |
          cd $REPO_FLODER
          echo "DATA=$(date +'%Y-%m-%d'-d +"12"hour) \n" >> $GITHUB_ENV
          ./scripts/feeds update -a
          ./scripts/feeds install -a

    - name: Run diy
      run: curl -fsSL https://raw.githubusercontent.com/loso3000/temp/master/i_openwrt.sh | /bin/bash 
    - name: Download package
      id: package
      run: |
        cd $REPO_FLODER
        make defconfig
        make download -j$(($(nproc)+1)) &

    - name: Compile Packages
      id: compileopenwrt
      run: |
        cd $REPO_FLODER
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
    - name: Generate Firmware
      id: generate
      run: |
        cd $REPO_FLODER
        make package/install -j$(nproc) || make package/install -j1 V=s
        echo "::set-output name=GENERATE_STATUS::success"
    - name: Generate Firmware2
      id: generate2
      run: |
        cd $REPO_FLODER
        make target/install -j$(nproc) || make target/install -j1 V=s
        make checksum
        echo "::set-output name=GENERATE_STATUS::success"
     
          echo $?
    - name: Check space usage
      run: df -hT


    - name: Upload  bin
      uses: actions/upload-artifact@main
      with:
          name: OpenWrt-ipv6-${{ github.event.inputs.target }}-${{ github.event.inputs.version }}-bin
          path: $REPO_FLODER/bin
          
    - name: Prepare Artifact
      run: |
        shopt -s extglob
        mkdir -p firmware/${{ github.event.inputs.target }} 
        if [[ ${{ github.event.inputs.target }}== "nanopi-r4s" || ${{ github.event.inputs.target }} == "nanopi-r2c" ]]; then
          rm -rf $REPO_FLODER/bin/targets/*/*/!(*.gz)
        fi
        if [ -f $REPO_FLODER/bin/targets/*/*/*sysupgrade* ]; then
          mkdir $REPO_FLODER/nanopi-r4s
          cp -rf $REPO_FLODER/bin/targets/*/*/*r4s*sysupgrade* ./firmware/nanopi-r4s/ || true
          mkdir firmware/nanopi-r2c
          cp -rf $REPO_FLODER/bin/targets/*/*/*r2c*sysupgrade* ./firmware/nanopi-r2c/ || true
          cp -rf $REPO_FLODER/bin/targets/*/*/*{combined,r2s*sysupgrade,rpi-4*sysupgrade}* ./firmware/${{ github.event.inputs.target }}/ || true
          
        else
          cp -rf $REPO_FLODER/bin/targets/*/*/*{combined,sysupgrade}* ./firmware/${{ github.event.inputs.target }}/ || true
          cd ./firmware/${{ github.event.inputs.target }}
          gzip *.img || true
          echo -e "Sirpdboy-IPV6-ZJ-${{ env.DATA}}极致通用版--【efi通用不区分引导方式】\n" > 版本日期和MD5信息.txt
          echo -e "【固件插件说明与各版本下载链接】：https://github.com/sirpdboy/openwrt/ \n" >> 版本日期和MD5信息.txt
          echo -e "MD5: \n" >> 版本日期和MD5信息.txt
          md5sum *img* >> 版本日期和MD5信息.txt
        fi
        cp -rf $REPO_FLODER/bin/targets/*/*/*{combined,r2s*sysupgrade,rpi-4*sysupgrade}* ./firmware/${{ github.event.inputs.target }}/ || true
        
        

    - name: Upload Firmware
      uses: actions/upload-artifact@main
      with:
          name: OpenWrt-ipv6-${{ github.event.inputs.target }}-${{ github.event.inputs.version }}-Firmware
          path: ./firmware/${{ github.event.inputs.target }}
      #- name: Upload firmware to cowtransfer
      #  run: |
      #  curl -fsSL git.io/file-transfer | sh
      #   ./transfer cow --block 2621440 -s -p 64 --no-progress ./jz/firmware 2>&1 | tee cowtransfer.log
      #   echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
    - name: Upload Firmware wetransfer
      run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ./jz/firmware 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
