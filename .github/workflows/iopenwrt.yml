name: i_openwrt
on:
  # push:
  #   paths: [ i_openwrt ]
  # schedule: [ cron: 0 2 */7 * * ]
  # watch:
  #   types: started
  workflow_dispatch:
    inputs:
      branch:
        description: '选择ImmortalWrt仓库的分支：'
        default: 'openwrt-18.06-k5.4'
        required: true
        type: choice
        options: [ openwrt-18.06-k5.4, openwrt-21.02, master, openwrt-18.06, openwrt-18.06-dev ]
      target:
        description: '选择要生成firmware的机型：'
        default: 'x86_64'
        required: true
        type: choice
        options: [ x86_64, newifi-d2, r4s, r2r, r2c, phicomm_k2p, armvirt_64_Default, asus_rt-n16 ]
      version:
        description: '选择要生成版本： super(极致), mini(精简)，plus(全家桶) ，dz(定制）'
        default: 'super'
        required: true
        type: choice
        options: [super,mini,plus,dz]
      partsize:
        description: '设置rootfs大小：（选填,只适用x86_64，r系列，armvirt）'
        required: false

env:
  UPLOAD_RELEASE: true
  UPLOAD_PACKAGES: true
  UPLOAD_SYSUPGRADE: true
  UPLOAD_BIN_DIR: true
  UPLOAD_COWTRANSFER: true
  UPLOAD_WETRANSFER: true
  REPO_FLODER: openwrt

jobs:
  immo-openwrt:
    name: iopenwrt-${{ github.event.inputs.target }}-${{ github.event.inputs.version }}

    runs-on: ubuntu-20.04
    continue-on-error: true

    env:
      VERSION: ${{ github.event.inputs.version }}
      PARTSIZE: ${{ github.event.inputs.partsize }}
      REPO_BRANCH: ${{ github.event.inputs.branch }}
      TARGET_DEVICE: ${{ github.event.inputs.target }}

    # strategy:
    #   fail-fast: false
    #   matrix:
    #     target: ["${{ github.event.inputs.target }}"]

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: 初始环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        chmod +x ./init_build_environment.sh
        sudo ./init_build_environment.sh &
    - name: 运行自定义
      run: curl -fsSL https://raw.githubusercontent.com/loso3000/temp/master/openwrt/i_openwrt.sh | /bin/bash 
  
    - name: 下载软件包
      run: |
        cd $REPO_FLODER
        
        #echo "REPO_FLODER=$PWD" >> $GITHUB_ENV
        #echo "::set-output name=REPO_FLODER::$(echo $PWD)"
        make download -j16
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Cache
      uses: klever1988/cachewrtbuild@test
      continue-on-error: true
      if: env.CACHE_ACTIONS == 'true'
      with:
        ccache: 'true'
        mixkey: ${{env.REPO_BRANCH}}-${{env.ARCH}}-
        prefix: ${{github.workspace}}/${{env.REPO_FLODER}}

    - name: Compile Packages
      id: compileopenwrt
      run: |
        cd $REPO_FLODER
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
    - name: Generate Firmware
      id: generate
      run: |
        cd $REPO_FLODER
        make package/install -j$(nproc) || make package/install -j1 V=s
        echo "::set-output name=GENERATE_STATUS::success"
    - name: Generate Firmware2
      id: generate2
      run: |
        cd $REPO_FLODER
        make target/install -j$(nproc) || make target/install -j1 V=s
        make checksum
        echo "::set-output name=GENERATE_STATUS::success"
     
          echo $?

    - name: Upload Firmware
      uses: actions/upload-artifact@main
      with:
          name: OpenWrt-ipv6-${{ github.event.inputs.target }}-${{ github.event.inputs.version }}-Firmware
          path: ./jz/firmware
    - name: Upload  IPK
      uses: actions/upload-artifact@main
      with:
          name: OpenWrt-ipv6-${{ github.event.inputs.target }}-${{ github.event.inputs.version }}-Ipk
          path: ./jz/package
    - name: Prepare Artifact
      run: |
          mkdir -p ./jz/firmware
          mkdir -p ./jz/package
          cp -rf $(find ./openwrt/bin/ -type f -name "*.ipk") ./jz/package
          # find ./openwrt/bin/targets/ -name "*combined*img*" -or -name "*sysupgrade*"| xargs -i mv -f {} ./jz/firmware
          
          find ./openwrt/bin/targets/ -name "*combined*" -or -name "*sysupgrade*" -or -name "*bin*"| xargs -i mv -f {} ./jz/firmware
          #cd ./jz/firmware
          #gzip *.img
          #echo -e "Sirpdboy-IPV6-ZJ-${{ env.DATA}}极致通用版--【efi通用不区分引导方式】\n" > 版本日期和MD5信息.txt
          #echo -e "【固件插件说明与各版本下载链接】：https://github.com/sirpdboy/openwrt/ \n" >> 版本日期和MD5信息.txt
          #echo -e "MD5: \n" >> 版本日期和MD5信息.txt
          #md5sum *img* >> 版本日期和MD5信息.txt

      #- name: Upload firmware to cowtransfer
      #  run: |
      #  curl -fsSL git.io/file-transfer | sh
      #   ./transfer cow --block 2621440 -s -p 64 --no-progress ./jz/firmware 2>&1 | tee cowtransfer.log
      #   echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
    - name: Upload Firmware wetransfer
      run: |
          curl -fsSL git.io/file-transfer | sh
          ./transfer wet -s -p 16 --no-progress ./jz/firmware 2>&1 | tee wetransfer.log
          echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
